# The Effortless Monthly Expense Calculator
#
# By Clive Bluston 
#
#  Up until now all tools that help you calculate your monthly expenses require you to collect
# and enter them into some sort of expense calculator. This requires a lot of effort and is 
# error prone. 
# This script extracts the information directly from your bank account transactions.
# It will work well even if you have multiple back accounts, investments and credit cards.
# The only condition is that all your expenses eventually land in your current account. This is
# the case for most people.
# 
# The script is based on the English Excel generated by Bank Discount.
# It can be modified for other Banks and languages just by creating a new subclass of TransactionAnalyzer
# Use TransactionAnalyzer_BankDiscountEnglish as a template.
#

# You may need to make the following installs
# python.exe -m pip install --upgrade pip
# pip install pandas
# pip install openpyxl
#
# Generate an Excel file of your transactions as follows:
# Login to Bank in a browser
# Set to English (Hebrew can be supported by adjusted the script)
# Go to your Current Account transactions.
# Select 12 months of transactions using the menu.
# Select Export to Excel using the Export menu.
# Save the file.
# Run as follows:
# python expenseCalc.py Current Account_29052022_0749.xlsx

# Import pandas
import pandas as pd
import re
import sys
import datetime

#print(pd.__version__)

class TransactionAnalyzer:
    # Abstract class. You need to create a subclass for each Bank

    def analyze(self):
        # Load spreadsheet
        xl = pd.ExcelFile(file)

        # Print the sheet names
        #print(xl.sheet_names)

        # Load a sheet into a DataFrame by name: df1. Forst row is 9 (Which is 8 when zero based)
        df = xl.parse(self.sheetName, header=self.firstRow)

        # Initial values
        sum = 0
        extraordinary = 0
        income = 0
        months = [0,0,0,0,0,0,0,0,0,0,0,0]
        # Fixed number of Months. A future improvement would be to calculate this from the data.
        numberOfMonths = 12

        # Iterate over all transactions
        for index, row in df.iterrows():
          description = row[self.descriptionColumnName]
          
          # Stop on end of data
          if type(description) != str:
            break
            
          # Exclude known non-expenses
          if re.search(self.excludeRegex,description) != None:
            #print("Exclude:",description)
            continue
            
          value = row[self.valueColumnName]
          if value < 0:
            date = row[self.dateColumnName]
            dt = pd.to_datetime(date)
            # Display and collect extrordinary expenses.
            if value < -10000:
              extraordinary += value
              print("Extrordinary expense: ",date," ",description," ",value)
            else:
              # Accumulate the monthly value.
              months[dt.month -  1] += value

              
            sum += value
          else:  # Value > 0
            if re.search(self.includeRegex,description) != None:
              # Accumulate returned expenses
              sum += value;
              print("Returned expense: ",date," ",description," ",value)
            elif re.search(self.incomeRegex,description) != None:
              # Accumulate income
              income += value

            
          
        print("\nTotal= %d Monthly= %d"%(abs(sum),abs(sum)/numberOfMonths))

        # Print again excluding extraordinary expenses.
        sum = sum - extraordinary

        print("\nExcluding extraordinary expenses:")
        print("Total= %d Monthly= %d"%(abs(sum),abs(sum)/numberOfMonths))

        # Print monthly values. Not very accurate because we may start in the middle of a month, 
        # so part of the month maybe from previous year.
        print("\nExpenses by month.")
        for month in range(1,13):
          print(month," - %d"% abs(months[month - 1]))
          
        print("\nSalary total = %d Monthly = %d."%(abs(income),abs(income)/numberOfMonths))

  

   
   
class TransactionAnalyzer_BankDiscountEnglish(TransactionAnalyzer):
   # This a bank/language specific subclass. Use it as a template for a new bank or language.
   def __init__(self):
        # First row is the title row of the sheet. It is 9 (Which is 8 when zero based)
        self.firstRow = 8
        
        # Excel Sheet name
        self.sheetName = "Current Account"
        
        # Excel column names
        self.dateColumnName = "Date"
        self.valueColumnName = "â‚ª Credit/debit "
        self.descriptionColumnName = "Description"
        
        # Transfers to my accounts and investment costs:
        # My other bank account (Since this is personal, we should move it to a personalization class)
        # Purchase of shares
        # Savings account
        # Savings account
        # Savings account
        # Tax on savings
        # Tax on savings
        # Tax on savings
        # Tax on savings
        self.excludeRegex = "TRANS\. TO ACC 0084071...,10-601.*" + "|" + \
                            "PURCHASE- .*" + "|" + \
                            "DEPOSIT INTO DEPOSIT ACCOUNT" + "|" + \
                            "TERM PLACEMENT *" + "|" + \
                            "TERM DEPOSIT R PER YOM" + "|" + \
                            "TAX DEDUCTION DUE TO SECURITIES-" +"|" + \
                            "TAX ON PROFIT FROM DEPOSIT" + "|" + \
                            "TAX ON MATURITY OF DEPOSIT" + "|" + \
                            "TAX ON PROFIT FROM RENEWED DEP"

        # Expenses that were returned to me via BIT(like Venmo). We assume that anything coming from BIT is the return of an expense.
        # It could also be other things like the sale of a personal item, however that can also be considered a negative expense.
        self.includeRegex = ".*Transfer From Account 12-799-0095-000000000.*"
        
        # Everything here is income (Salary etc.)
        self.incomeRegex = "SALARY"

   def checkFile(fileName):
        # Try to identify the bank/language according to the name of the file.
        # If not, we could look inside the file.
        return re.search("Current Account.*_....\.xlsx",fileName)

# Main
# Check argument
if len(sys.argv) != 2:
   print("Please specify an xlsx file with 12 months of transactions from Bank Discount(English) on the command line.")
   exit()
   
# First argument is the Spreadsheet filename. Ignore the rest.
file = sys.argv[1]

analyzer = None
if TransactionAnalyzer_BankDiscountEnglish.checkFile(file) != None:
    analyzer = TransactionAnalyzer_BankDiscountEnglish()
# elif Other bank here
    
if analyzer:
    analyzer.analyze()
else:
    print("The bank could not be identified from the file.")

